                .map(result -> {
                    Object[] row = (Object[]) result;
                    return new QueriesResults.RepData(
                            row[0] != null ? row[0].toString() : null,  // QUELLE
                            row[1] != null ? row[1].toString() : null,  // NAME
                            row[2] != null ? row[2].toString() : null,  // RepR
                            row[3] != null ? (Date)row[3] : null,       // RepPer_S
                            row[4] != null ? (Date)row[4] : null,       // RepPer_E
                            row[5] != null ? (Date)row[5] : null,       // RepPer
                            row[6] != null ? (Date)row[6] : null        // DesExTs
                    );
                })
                .collect(Collectors.toList());

@Override
    public QueriesResults executeQueries(int reportId) {
        String sqlB = "SELECT new com.example.QueriesResults$RepData(b.QUELLE, m.NAME, b.RepR, r.RepPer_S, r.RepPer_E, r.RepPer, r.DesExTs) " +
                "FROM rep r " +
                "JOIN C_M_I m ON m.ID = r.REF_M_I " +
                "JOIN body b ON b.REF_rep = r.id " +
                "WHERE r.id = :id";

        List<QueriesResults.RepData> queriesResultsRepData = entityManager.createQuery(sqlB, QueriesResults.RepData.class)
                .setParameter("id", Long.valueOf(reportId)).getResultList();

        String sqlA1 = "SELECT l.country, l.mRefId, TO_CHAR(l.RepPer, 'YYYY-MM-DD HH24:MI:SS.FF3') as RepPer, convert_blob_to_xmltype(h.xml_fragment).getClobVal() as XML_FRAGMENT " +
                "FROM rep r " +
                "JOIN body b ON b.REF_rep = r.id " +
                "JOIN DE_Lief l ON l.id = b.REF_DE_Lief_ID " +
                "JOIN DE_Lief_HIST h ON h.REF_DE_Lief = l.id  " +
                "AND h.REF_BODY = b.id " +
                "WHERE r.id = :reportId " +
                "AND l.STATUS = 'ACCEPTED' " +
                "AND h.STATUS = 'FREIGEGEBEN' " +
                "AND h.F_C_R = 1 " +
                "AND h.D_T_I <> 'OECD_3'  ";

        String sqlA2 =
                "SELECT l.country, l.mRefId, TO_CHAR(l.RepPer, 'YYYY-MM-DD HH24:MI:SS.FF3') as RepPer, convert_blob_to_xmltype(h.xml_fragment).getClobVal() as XML_FRAGMENT " +
                        "FROM rep r " +
                        "JOIN body b ON b.REF_rep = r.id " +
                        "JOIN DI_Lief l ON l.id = b.REF_DI_Lief_ID " +
                        "JOIN DE_Lief_HIST h ON h.REF_DI_Lief = l.id  " +
                        "AND h.REF_DI_Lief = l.id " +
                        "WHERE r.id = :reportId1 " +
                        "AND l.LiefSt_DI = 'ACCEPTED' " +
                        "AND h.STATUS IN ('FREIGEGEBEN', 'EINGESCHRAENKT_FREIGEGEBEN') " +
                        "AND h.F_C_R = 1 " +
                        "AND h.D_T_I <> 'OECD_3' ";

        List<QueriesResults.XmlFragmentData> queriesResultXmlFragmentsDEA = (List<QueriesResults.XmlFragmentData>) entityManager.createNativeQuery(sqlA1)
                .setParameter("reportId", Long.valueOf(reportId))
                .getResultStream()
                .map(result -> {
                    Object[] row = (Object[]) result;
                    return new QueriesResults.XmlFragmentData(
                            row[0] != null ? row[0].toString() : null,
                            row[1] != null ? row[1].toString() : null,
                            row[2] != null ? row[2].toString() : null,
                            clobToString(row[3])
                    );
                }).collect(Collectors.toList());

        List<QueriesResults.XmlFragmentData> queriesResultXmlFragmentsDEI = (List<QueriesResults.XmlFragmentData>) entityManager.createNativeQuery(sqlA2)
                .setParameter("reportId1", Long.valueOf(reportId))
                .getResultStream()
                .map(result -> {
                    Object[] row = (Object[]) result;
                    return new QueriesResults.XmlFragmentData(
                            row[0] != null ? row[0].toString() : null,
                            row[1] != null ? row[1].toString() : null,
                            row[2] != null ? row[2].toString() : null,
                            clobToString(row[3])
                    );
                }).collect(Collectors.toList());

        List<QueriesResults.XmlFragmentData> queriesResultXmlFragments = new ArrayList<>();
        queriesResultXmlFragments.addAll(queriesResultXmlFragmentsDEA);
        queriesResultXmlFragments.addAll(queriesResultXmlFragmentsDEI);

        return new QueriesResults(queriesResultXmlFragments, queriesResultsRepData);
    }
	
	
	
and RepData is:

    public static class RepData {
        private boolean isRepExist = false;
        private String quelle;
        private String mName = null;
        private String repR = null;
        private Date repPerS = null;
        private Date repPerE = null;
        private Date repPer = null;
        private Date desExTs = null;

        public RepData(String quelle, String mName, String repR, Date repPerS, Date repPerE, Date repPer, Date desExTs) {
            this.isRepExist = true;
            this.quelle = quelle;
            this.mName = mName;
            this.repR = repR;
            this.repPerS = repPerS;
            this.repPerE = repPerE;
            this.repPer = repPer;
            this.desExTs = desExTs;
        }
