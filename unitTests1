@Test
    public void getRep_when950AndNoFragments_returnsOnlyFileName() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        
        // Set up RepData for 950 case
        List<QueriesResults.RepData> repDataList = new ArrayList<>();
        QueriesResults.RepData repData = new QueriesResults.RepData();
        
        // Setting required fields
        repData.setMName("TEST");
        repData.setRepR("CMC_950");  // Setting 950 case
        repData.setQuelle("SOURCE");
        repData.setIsBodyDeleted(1);  // Setting deleted flag
        
        // Set dates
        Calendar calendar = Calendar.getInstance();
        calendar.set(2024, Calendar.DECEMBER, 31);
        Date endDate = calendar.getTime();
        calendar.set(2024, Calendar.JANUARY, 1);
        Date startDate = calendar.getTime();
        
        repData.setRepPer(endDate);
        repData.setRepPerS(startDate);
        repData.setRepPerE(endDate);
        repData.setDesExTs(new Date());  // Setting DesExTs to ensure ONLY_FILE_NAME result
        
        repDataList.add(repData);
        queriesResults.setRepData(repDataList);
        
        // Empty fragments list
        queriesResults.setFragments(new ArrayList<>());
        
        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.ONLY_FILE_NAME, result.getCode());
        assertEquals("950_TEST_2024-12.geloescht", result.getFileName());
        assertNull(result.getXmlFileContent());
    }


@Test
    public void testBuildFileName_allCombinations() throws Exception {
        // Test data structure: repR, isDeleted, startDate, endDate, expectedFileName
        Object[][] testCases = {
            // All conditions false
            {"CMC_123", 0, "2024-01-01", "2024-12-31", "SOURCE_TEST_2024.xml"},
            
            // Single condition true
            {"CMC_950", 0, "2024-01-01", "2024-12-31", "950_TEST_2024-12.xml"},
            {"CMC_123", 1, "2024-01-01", "2024-12-31", "SOURCE_TEST_2024.geloescht"},
            {"CMC_123", 0, "2024-01-01", "2024-06-30", "SOURCE_TEST_2024-06.xml"},
            
            // Two conditions true
            {"CMC_950", 1, "2024-01-01", "2024-12-31", "950_TEST_2024-12.geloescht"},
            {"CMC_950", 0, "2024-01-01", "2024-06-30", "950_TEST_2024-06.xml"},
            {"CMC_123", 1, "2024-01-01", "2024-06-30", "SOURCE_TEST_2024-06.geloescht"},
            
            // All conditions true
            {"CMC_950", 1, "2024-01-01", "2024-06-30", "950_TEST_2024-06.geloescht"}
        };

        Method buildFileNameMethod = MyService.class.getDeclaredMethod("buildFileName", QueriesResults.class);
        buildFileNameMethod.setAccessible(true);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        for (Object[] testCase : testCases) {
            // Arrange
            QueriesResults queriesResults = new QueriesResults();
            List<QueriesResults.RepData> repDataList = new ArrayList<>();
            QueriesResults.RepData repData = new QueriesResults.RepData();
            
            repData.setMName("TEST");
            repData.setRepR((String) testCase[0]);
            repData.setQuelle("SOURCE");
            repData.setIsBodyDeleted((Integer) testCase[1]);
            repData.setRepPerS(sdf.parse((String) testCase[2]));
            repData.setRepPerE(sdf.parse((String) testCase[3]));
            repData.setRepPer(sdf.parse((String) testCase[3])); // Using end date as report period
            
            repDataList.add(repData);
            queriesResults.setRepData(repDataList);

            // Act
            String result = (String) buildFileNameMethod.invoke(myService, queriesResults);

            // Assert
            String expectedFileName = (String) testCase[4];
            assertEquals(String.format(
                "Failed for repR=%s, isDeleted=%d, dates=%s to %s", 
                testCase[0], testCase[1], testCase[2], testCase[3]
            ), expectedFileName, result);
        }
    }

@Test
    public void getRep_whenHasSixFragmentsForTwoCountries_returnsCorrectXmlStructure() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        
        // Set up RepData
        List<QueriesResults.RepData> repDataList = new ArrayList<>();
        QueriesResults.RepData repData = new QueriesResults.RepData();
        repData.setMName("TEST");
        repData.setRepR("CMC_123");
        repData.setQuelle("TEST");
        repData.setRepPer(new Date());
        repData.setRepPerS(new Date());
        repData.setRepPerE(new Date());
        repDataList.add(repData);
        queriesResults.setRepData(repDataList);
        
        // Set up 6 Fragments for 2 countries (DE and FR)
        List<QueriesResults.XmlFragmentData> fragments = new ArrayList<>();
        
        // DE Fragments
        fragments.add(createXmlFragment("DE", "<R_I><data>DE Test 1</data></R_I>"));
        fragments.add(createXmlFragment("DE", "<Rep><data>DE Test 2</data></Rep>"));
        fragments.add(createXmlFragment("DE", "<Additional_I><data>DE Test 3</data></Additional_I>"));
        
        // FR Fragments
        fragments.add(createXmlFragment("FR", "<R_I><data>FR Test 1</data></R_I>"));
        fragments.add(createXmlFragment("FR", "<Rep><data>FR Test 2</data></Rep>"));
        fragments.add(createXmlFragment("FR", "<Additional_I><data>FR Test 3</data></Additional_I>"));
        
        queriesResults.setFragments(fragments);

        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.FILE_NAME_AND_CONTENT, result.getCode());
        assertNotNull(result.getFileName());
        assertNotNull(result.getXmlFileContent());
        
        String xmlContent = result.getXmlFileContent();
        assertTrue(xmlContent.contains("CMC_KAKA"));
        
        // Verify Message section exists
        assertTrue(xmlContent.contains("<MeSp>"));
        assertTrue(xmlContent.contains("</MeSp>"));
        
        // Verify two Body sections exist
        int bodyCount = countOccurrences(xmlContent, "<Body>");
        assertEquals("Should have exactly 2 Body elements", 2, bodyCount);
        
        // Verify correct ordering within each Body
        // Each body should maintain R_I -> Rep -> Additional_I order
        assertTrue(xmlContent.contains("<R_I>"));
        assertTrue(xmlContent.contains("<Rep>"));
        assertTrue(xmlContent.contains("<Additional_I>"));
        
        // Verify all test data is present
        assertTrue(xmlContent.contains("DE Test 1"));
        assertTrue(xmlContent.contains("DE Test 2"));
        assertTrue(xmlContent.contains("DE Test 3"));
        assertTrue(xmlContent.contains("FR Test 1"));
        assertTrue(xmlContent.contains("FR Test 2"));
        assertTrue(xmlContent.contains("FR Test 3"));
    }
    
    // Helper method to create XML fragment
    private QueriesResults.XmlFragmentData createXmlFragment(String country, String xmlContent) {
        QueriesResults.XmlFragmentData fragment = new QueriesResults.XmlFragmentData();
        fragment.setCountry(country);
        fragment.setXmlFragment(xmlContent);
        return fragment;
    }
    
    // Helper method to count occurrences of a substring in a string
    private int countOccurrences(String str, String findStr) {
        int count = 0;
        int lastIndex = 0;
        while (lastIndex != -1) {
            lastIndex = str.indexOf(findStr, lastIndex);
            if (lastIndex != -1) {
                count++;
                lastIndex += findStr.length();
            }
        }
        return count;
    }


@Test
    public void isRepPerShort_whenPeriodExactlyOneYear_returnsFalse() {
        // Arrange
        Calendar calendar = Calendar.getInstance();
        calendar.set(2024, Calendar.JANUARY, 1); // Set to January 1, 2024
        Date startDate = calendar.getTime();
        
        calendar.set(2024, Calendar.DECEMBER, 31); // Set to December 31, 2024
        Date endDate = calendar.getTime();

        // Act
        boolean result = myService.isRepPerShort(startDate, endDate);

        // Assert
        assertFalse("Period of exactly one year should return false", result);
    }


package com.example;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MyServiceTest {

    @Mock
    private QueryDao queryDao;

    private MyService myService;

    @Before
    public void setUp() {
        myService = new MyService(queryDao);
    }

    @Test
    public void getRep_whenNoReportData_returnsNoReportFound() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        queriesResults.setRepData(new ArrayList<>());
        queriesResults.setFragments(new ArrayList<>());
        
        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.NO_REPORT_FOUND, result.getCode());
        assertNull(result.getFileName());
        assertNull(result.getXmlFileContent());
    }

    @Test
    public void getRep_whenNoFragmentsAndNoDesExTs_returnsNothingToSend() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        List<QueriesResults.RepData> repDataList = new ArrayList<>();
        QueriesResults.RepData repData = new QueriesResults.RepData();
        repDataList.add(repData);
        queriesResults.setRepData(repDataList);
        queriesResults.setFragments(new ArrayList<>());

        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.NOTHING_TO_SEND, result.getCode());
        assertNull(result.getFileName());
        assertNull(result.getXmlFileContent());
    }

    @Test
    public void getRep_whenNoFragmentsButHasDesExTs_returnsOnlyFileName() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        List<QueriesResults.RepData> repDataList = new ArrayList<>();
        QueriesResults.RepData repData = new QueriesResults.RepData();
        repData.setDesExTs(new Date());
        repData.setMName("TEST");
        repData.setRepR("CMC_123");
        repData.setQuelle("TEST");
        repData.setRepPer(new Date());
        repData.setRepPerS(new Date());
        repData.setRepPerE(new Date());
        repDataList.add(repData);
        queriesResults.setRepData(repDataList);
        queriesResults.setFragments(new ArrayList<>());

        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.ONLY_FILE_NAME, result.getCode());
        assertNotNull(result.getFileName());
        assertNull(result.getXmlFileContent());
    }

    @Test
    public void getRep_whenHasValidFragments_returnsFileNameAndContent() {
        // Arrange
        QueriesResults queriesResults = new QueriesResults();
        
        // Set up RepData
        List<QueriesResults.RepData> repDataList = new ArrayList<>();
        QueriesResults.RepData repData = new QueriesResults.RepData();
        repData.setMName("TEST");
        repData.setRepR("CMC_123");
        repData.setQuelle("TEST");
        repData.setRepPer(new Date());
        repData.setRepPerS(new Date());
        repData.setRepPerE(new Date());
        repDataList.add(repData);
        queriesResults.setRepData(repDataList);
        
        // Set up Fragments
        List<QueriesResults.XmlFragmentData> fragments = new ArrayList<>();
        QueriesResults.XmlFragmentData fragment = new QueriesResults.XmlFragmentData();
        fragment.setCountry("DE");
        fragment.setXmlFragment("<Rep><data>Test</data></Rep>");
        fragments.add(fragment);
        queriesResults.setFragments(fragments);

        when(queryDao.executeQueries(anyInt())).thenReturn(queriesResults);

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.FILE_NAME_AND_CONTENT, result.getCode());
        assertNotNull(result.getFileName());
        assertNotNull(result.getXmlFileContent());
        assertTrue(result.getXmlFileContent().contains("CMC_KAKA"));
    }

    @Test
    public void isRepPerShort_whenPeriodLessThanYear_returnsTrue() {
        // Arrange
        Date startDate = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(startDate);
        calendar.add(Calendar.MONTH, 6);
        Date endDate = calendar.getTime();

        // Act
        boolean result = myService.isRepPerShort(startDate, endDate);

        // Assert
        assertTrue(result);
    }

    @Test
    public void isRepPerShort_whenPeriodMoreThanYear_returnsFalse() {
        // Arrange
        Date startDate = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(startDate);
        calendar.add(Calendar.YEAR, 1);
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        Date endDate = calendar.getTime();

        // Act
        boolean result = myService.isRepPerShort(startDate, endDate);

        // Assert
        assertFalse(result);
    }

    @Test
    public void getRep_whenProcessingFails_returnsError() {
        // Arrange
        when(queryDao.executeQueries(anyInt())).thenThrow(new RuntimeException("Test exception"));

        // Act
        MyService.Result result = myService.getRep(1);

        // Assert
        assertEquals(MyService.ResultCode.ERROR_PROCESSING, result.getCode());
        assertNull(result.getFileName());
        assertNull(result.getXmlFileContent());
    }
}
